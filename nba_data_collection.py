# -*- coding: utf-8 -*-
"""NBA Data Collection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y7Jt65E3K8J4SP2Icj80V0BOm6f2tblx

# Data Collection
This file will use python to webscrape and wrangle data from Basketball Reference. This is the first step of my project to analyze basketball players' playstyles. I will be collecting all sorts of data on the players, including common statistics and advanced metrics.
"""

import pandas as pd
import re
import numpy as np

"""## Per Game Stats

"""

# assign the webpage url to an object
url1 = "https://www.basketball-reference.com/leagues/NBA_2024_per_game.html"

# read in the html using pandas
PerGame24 = pd.read_html(url1)

# see how many tables are in the html
len(PerGame24)

# select the first (and only) table
pg24 = PerGame24[0]

# look at the first ten rows of the table
pg24.head(10)

# remove duplicates for players. keep first instance which represents player's overall season
pg24.drop_duplicates(subset = ['Player'], keep = 'first', inplace = True)

# look at first ten rows of dataset to check for duplicates
pg24.head(10)

# check structure of dataset
pg24.info()

"""## Offensive and Defensive Rating"""

url2 = "https://www.basketball-reference.com/leagues/NBA_2024_per_poss.html"

PerPoss24 = pd.read_html(url2)

len(PerPoss24)

pp24 = PerPoss24[0]
pp24.drop_duplicates(subset = ['Player'], keep = 'first', inplace = True)
# keep only the offensive and defensive rating stats from this dataset
pp24 = pp24[['Player','ORtg','DRtg']]
pp24.head(10)

pp24.info()

"""## Advanced Stats"""

url3 = "https://www.basketball-reference.com/leagues/NBA_2024_advanced.html"
Adv24 = pd.read_html(url3)
len(Adv24)

adv24 = Adv24[0]
adv24.drop_duplicates(subset = ['Player'], keep = 'first', inplace = True)
adv24.head(10)

adv24.info()

# drop empty columns which are labeled as 'Unnamed...'
adv24.drop(adv24.columns[adv24.columns.str.contains('Unnamed',case = False)],axis = 1, inplace = True)
adv24.head(10)

adv24.info()

"""## Play-by-Play Stats"""

url4 = "https://www.basketball-reference.com/leagues/NBA_2024_play-by-play.html"
Play24 = pd.read_html(url4)
len(Play24)
Play24[0].head(10)
Play24[0].info()

pbp24 = Play24[0]
# the column headers in this dataset are multilevel. keep only the first level
pbp24.columns = pbp24.columns.get_level_values(1)
pbp24.drop_duplicates(subset = ['Player'], keep = 'first', inplace = True)
pbp24.head(10)

pbp24.info()

# replace the NaN occurrences with 0
pbp24.fillna(0, inplace = True)
pbp24.head(10)

"""## Shooting Stats"""

url5 = "https://www.basketball-reference.com/leagues/NBA_2024_shooting.html"
Shoot24 = pd.read_html(url5)
len(Shoot24)

sho24 = Shoot24[0]
sho24.columns = sho24.columns.get_level_values(1)
sho24.drop_duplicates(subset = ['Player'], keep = 'first', inplace = True)
sho24.drop(sho24.columns[sho24.columns.str.contains('Unnamed',case = False)],axis = 1, inplace = True)
sho24.head(10)

"""# Data Wrangling/Formatting
Now that the data is collected, it must be wrangled and formatted correctly for future analysis. This includes merging the data into one dataset, renaming the column names, and fixing the column data types.

## Removing Duplicate Columns
Before joining the datasets together, I am going to remove some duplicate and unneccessary columns from each dataset. This is not necessary for the joining process, but it will make things easier moving forward for myself.
"""

# drop unwanted columns
adv24.drop(['Pos','Age','Tm','G','MP'], axis = 'columns', inplace = True)
adv24.info()

pbp24.info()

pbp24.drop(['Pos','Age','Tm','G','MP'], axis = 'columns', inplace = True)
pbp24.info()

sho24.info()

sho24.drop(['Pos','Age','Tm','G','MP','FG%'], axis = 'columns', inplace = True)
sho24.info()

"""## Renaming Columns
As some of the column names are identical but represent different information, they must be changed before merging.
"""

# rename columns by referring to the old column name
pg24.rename(columns = {'FG':'FGM', '3P':'3PM', '2P':'2PM', 'FT':'FTM'}, inplace = True)
pg24.info()

# rename columns by column index number
pbp24.columns.values[11] = 'SFC'
pbp24.columns.values[12] = 'OFC'
pbp24.columns.values[13] = 'SFD'
pbp24.columns.values[14] = 'OFD'
pbp24.info()

sho24.columns.values[4] = '%0-3'
sho24.columns.values[5] = '%3-10'
sho24.columns.values[6] = '%10-16'
sho24.columns.values[7] = '%16-3P'
sho24.columns.values[8] = '%3P'
sho24.columns.values[9] = '2P%'
sho24.columns.values[10] = '0-3%'
sho24.columns.values[11] = '3-10%'
sho24.columns.values[12] = '10-16%'
sho24.columns.values[13] = '16-3P%'
sho24.columns.values[14] = '3P%'
sho24.columns.values[15] = '%2PA'
sho24.columns.values[16] = '%3PA'
sho24.columns.values[17] = '%FGAD'
sho24.columns.values[18] = '#D'
sho24.columns.values[19] = '%C3PA'
sho24.columns.values[20] = 'C3P%'
sho24.info()

sho24.drop(['3P%', 'Att.', '#', '2P%'], axis = 'columns', inplace = True)
sho24.info()

"""## Joining the Datasets"""

# merge datasets together by using 'Player' as common key. include all matching records
new1 = pd.merge(pg24, pp24, on = ['Player'], how = 'inner')
new1.info()

new2 = pd.merge(new1, adv24, on = ['Player','Rk'], how = 'inner')
new2.info()

new3 = pd.merge(new2, pbp24, on = ['Player', 'Rk'], how = 'inner')
new3.info()

NBA24 = pd.merge(new3, sho24, on = ['Player', 'Rk'], how = 'inner')
NBA24.info()

"""# Final Dataset
The NBA24 dataset will be the dataset I use for my future analysis. This contains all sorts of stats for every player during the 2023-2024 NBA season. We can take a look at the dataset below.
"""

NBA24 = NBA24[NBA24['Rk'] != 'Rk']
NBA24.head(10)

"""Before exporting this dataset to a file, there are some things which must be fixed and changed. First, all of the columns should be the correct type.

## Changing Data Types
"""

# change data types to string
## identify column numbers which should be strings
cols_to_string_nums = [1,2,4]
## select those columns in the dataset
cols_to_string = NBA24.columns[cols_to_string_nums]
## convert the data type for the selected columns
NBA24[cols_to_string] = NBA24[cols_to_string].astype(str)

# change data types to int
## identify column numbers which should be ints
cols_to_int_nums = [3,5,6,30,31,59,60,61,62,63,64,65,66,67]
## select those columns in the dataset
cols_to_int = NBA24.columns[cols_to_int_nums]
## convert the data type for the selected columns
for col in cols_to_int:
    NBA24[col] = pd.to_numeric(NBA24[col], errors='coerce').astype('Int64')

# remove '%' sign from records
cols_with_percent = ['PG%', 'SG%', 'SF%', 'PF%', 'C%']
for col in cols_with_percent:
    # Remove '%' signs and convert to numeric, coercing errors to NaN
    NBA24[col] = pd.to_numeric(NBA24[col].str.replace('%', ''), errors='coerce').astype('Int64')
NBA24.head()

# change data types to float
# Define column indices or ranges to convert
ranges = [
    (7, 29),
    (32, 51),
    (57, 58),
    (68, 84)
]

# Function to convert columns in a given range to float
def convert_columns_to_float(df, start_idx, end_idx):
    cols_to_convert = df.columns[start_idx:end_idx + 1]  # end_idx is inclusive
    for col in cols_to_convert:
        df[col] = pd.to_numeric(df[col].str.replace('%', ''), errors='coerce').astype(float)

# Convert columns in specified ranges
for start, end in ranges:
    convert_columns_to_float(NBA24, start, end)

NBA24.info()

NBA24.head()

"""## Transforming Columns
In the code below, I will ensure that all the statistics are on the per-game basis and not the season totals.
"""

cols_to_trans = ['OWS', 'DWS', 'WS', 'BadPass', 'LostBall', 'SFC', 'OFC', 'SFD', 'OFD', 'PGA', 'And1', 'Blkd', '#D']
for col in cols_to_trans:
    NBA24[col] = np.where(NBA24['G'] != 0, NBA24[col] / NBA24['G'], np.nan)

NBA24.head()

"""## Export Data to .csv"""

file_name = 'NBA24.csv'

NBA24.to_csv(file_name, index = False)

# the file should show up in the current working directory